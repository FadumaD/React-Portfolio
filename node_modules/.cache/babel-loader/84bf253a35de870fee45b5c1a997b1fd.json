{"ast":null,"code":"var _jsxFileName = \"/Users/fadumadahir/Downloads/React-Portfolio/src/components/pages/Contact.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\"; // Import useState\nimport { validateEmail, validatePhoneNumber, toTitleCase } from \"../utils/helpers\"; // Import helper files\n\n// Builds the Contact component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Contact() {\n  _s();\n  const defaultErrorMessage = \"I'm sorry. This form does not currently send emails, but input validation functions correctly.\";\n\n  // Variables and setters for form inputs\n  const [inputs, setInputs] = useState({}); // Object to take care of all single line textboxes\n  const [message, setMessage] = useState(\"\"); // State variable to take care of the text area\n  const [errorMessage, setErrorMessage] = useState(defaultErrorMessage); // State variable for the error message.\n\n  // Event handler for all the text boxes when their value changes\n  const handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs(values => ({\n      ...values,\n      [name]: value\n    }));\n  };\n\n  // Event handler for the text area for when it's value changes\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n\n  // Event handler for onBlur, i.e. focus leaves the control.\n  // Performs validation of the form inputs\n  const handleLostFocus = event => {\n    const {\n      target\n    } = event;\n    const inputName = target.name;\n    const inputValue = target.value;\n\n    // If the field is blank, tell the user that it's required.\n    if (inputValue === \"\") {\n      setErrorMessage(`${toTitleCase(inputName)} is required.`);\n      return;\n    }\n\n    // If there's something in the email text box, check to see if it's a valid email address\n    if (inputName === \"email\") {\n      if (!validateEmail(inputValue)) {\n        setErrorMessage(\"Invalid Email Address.\");\n        return;\n      }\n    }\n\n    // If there's something in the phone number text box, check to see if it's a valid phone number\n    if (inputName === \"phone\") {\n      if (!validatePhoneNumber(inputValue)) {\n        setErrorMessage(\"Invalid Phone Number.\");\n        return;\n      }\n    }\n\n    // If all are good, clear the error message\n    if (inputs.name && message && validatePhoneNumber(inputs.phone) && validateEmail(inputs.email)) {\n      setErrorMessage(\"\");\n    }\n  };\n\n  // Event handler for submitting the form, i.e. clicking the submit button\n  const handleSubmit = event => {\n    event.preventDefault();\n    // If all form inputs are good...\n    if (inputs.name && message && validatePhoneNumber(inputs.phone) && validateEmail(inputs.email)) {\n      // This is where we would actually send an email, but that's not required for this challenge.\n      // In fact, the requirements state: \"Because this application doesnâ€™t include a back end or connect to an API, the contact form doesn't need to save this information right now. You'll add back-end functionality in the next few weeks. In the meantime, consider including your email address and phone number on the Contact page.\"\n\n      // So, we'll just set an error message for now.\n      setErrorMessage(defaultErrorMessage);\n    }\n  };\n\n  // Builds the Contact page\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sections\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Contact\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"name\",\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            value: inputs.name || \"\",\n            onChange: handleChange,\n            onBlur: handleLostFocus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"email\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"email\",\n            name: \"email\",\n            value: inputs.email || \"\",\n            onChange: handleChange,\n            onBlur: handleLostFocus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"email\",\n            children: \"Phone Number:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"phone\",\n            name: \"phone\",\n            value: inputs.phone || \"\",\n            onChange: handleChange,\n            onBlur: handleLostFocus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"message\",\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"message\",\n            name: \"message\",\n            value: message,\n            onChange: handleMessageChange,\n            onBlur: handleLostFocus,\n            rows: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            text: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Contact, \"xK/qvJ/GwBfPdPHhKGtHNjyPbfE=\");\n_c = Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["useState","validateEmail","validatePhoneNumber","toTitleCase","Contact","defaultErrorMessage","inputs","setInputs","message","setMessage","errorMessage","setErrorMessage","handleChange","event","name","target","value","values","handleMessageChange","handleLostFocus","inputName","inputValue","phone","email","handleSubmit","preventDefault"],"sources":["/Users/fadumadahir/Downloads/React-Portfolio/src/components/pages/Contact.js"],"sourcesContent":["import { useState } from \"react\"; // Import useState\nimport { validateEmail, validatePhoneNumber, toTitleCase } from \"../utils/helpers\"; // Import helper files\n\n// Builds the Contact component\nexport default function Contact() {\n\n  const defaultErrorMessage =\n    \"I'm sorry. This form does not currently send emails, but input validation functions correctly.\";\n\n  // Variables and setters for form inputs\n  const [inputs, setInputs] = useState({}); // Object to take care of all single line textboxes\n  const [message, setMessage] = useState(\"\"); // State variable to take care of the text area\n  const [errorMessage, setErrorMessage] = useState(defaultErrorMessage); // State variable for the error message.\n\n  // Event handler for all the text boxes when their value changes\n  const handleChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs((values) => ({ ...values, [name]: value }));\n  };\n\n  // Event handler for the text area for when it's value changes\n  const handleMessageChange = (event) => {\n    setMessage(event.target.value);\n  };\n\n  // Event handler for onBlur, i.e. focus leaves the control.\n  // Performs validation of the form inputs\n  const handleLostFocus = (event) => {\n    const { target } = event;\n    const inputName = target.name;\n    const inputValue = target.value;\n\n    // If the field is blank, tell the user that it's required.\n    if (inputValue === \"\") {\n      setErrorMessage(`${toTitleCase(inputName)} is required.`);\n      return;\n    }\n\n    // If there's something in the email text box, check to see if it's a valid email address\n    if (inputName === \"email\") {\n      if (!validateEmail(inputValue)) {\n        setErrorMessage(\"Invalid Email Address.\");\n        return;\n      }\n    }\n\n    // If there's something in the phone number text box, check to see if it's a valid phone number\n    if (inputName === \"phone\") {\n      if (!validatePhoneNumber(inputValue)) {\n        setErrorMessage(\"Invalid Phone Number.\");\n        return;\n      }\n    }\n\n    // If all are good, clear the error message\n    if (\n      inputs.name &&\n      message &&\n      validatePhoneNumber(inputs.phone) &&\n      validateEmail(inputs.email)\n    ) {\n      setErrorMessage(\"\");\n    }\n  };\n\n  // Event handler for submitting the form, i.e. clicking the submit button\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // If all form inputs are good...\n    if (inputs.name && message && validatePhoneNumber(inputs.phone) && validateEmail(inputs.email)) {\n      // This is where we would actually send an email, but that's not required for this challenge.\n      // In fact, the requirements state: \"Because this application doesnâ€™t include a back end or connect to an API, the contact form doesn't need to save this information right now. You'll add back-end functionality in the next few weeks. In the meantime, consider including your email address and phone number on the Contact page.\"\n      \n      // So, we'll just set an error message for now.\n      setErrorMessage(defaultErrorMessage);\n    }\n  };\n\n  // Builds the Contact page\n  return (\n    <div className=\"sections\">\n      <section id=\"Contact\">\n        <h2>Contact</h2>\n        <p>\n          <form onSubmit={handleSubmit}>\n            \n            <label for=\"name\">Name:</label>\n            <br />\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={inputs.name || \"\"}\n              onChange={handleChange}\n              onBlur={handleLostFocus}\n            />\n            <br />\n\n            <label for=\"email\">Email:</label>\n            <br />\n            <input\n              type=\"text\"\n              id=\"email\"\n              name=\"email\"\n              value={inputs.email || \"\"}\n              onChange={handleChange}\n              onBlur={handleLostFocus}\n            />\n            <br />\n\n            <label for=\"email\">Phone Number:</label>\n            <br />\n            <input\n              type=\"text\"\n              id=\"phone\"\n              name=\"phone\"\n              value={inputs.phone || \"\"}\n              onChange={handleChange}\n              onBlur={handleLostFocus}\n            />\n            <br />\n\n            <label for=\"message\">Message:</label>\n            <br />\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              value={message}\n              onChange={handleMessageChange}\n              onBlur={handleLostFocus}\n              rows=\"10\"\n            />\n            <br />\n\n            <input type=\"submit\" text=\"Submit\" />\n\n          </form>\n          {errorMessage && (\n            <div>\n              <p className=\"error-text\">{errorMessage}</p>\n            </div>\n          )}\n        </p>\n      </section>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}